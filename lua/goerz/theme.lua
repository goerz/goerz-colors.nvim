local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function(opts)
    local c = require('goerz.colors').get_colors()
    local isDark = vim.o.background == 'dark'

    hl(0, 'Normal', { fg = c.Front, bg = c.Back })
    hl(0, 'ColorColumn', { bg = c.ColorColumn })
    hl(0, 'Cursor', { fg = c.CursorDark, bg = c.CursorLight })
    hl(0, 'CursorLine', { bg = c.CursorLine })
    hl(0, 'CursorColumn', { bg = c.CursorLine })
    hl(0, 'Directory', { fg = c.Blue })
    hl(0, 'DiffAdd', { bg = c.DiffAddLight })
    hl(0, 'DiffChange', { bg = c.DiffChange })
    hl(0, 'DiffDelete', { bg = c.DiffChangeLight })
    hl(0, 'DiffText', { bg = c.DiffChangeLight })
    hl(0, 'EndOfBuffer', { fg = c.DarkGreen, bg = c.Gray90 })
    hl(0, 'ErrorMsg', { fg = c.White, bg = c.Red })
    hl(0, 'VertSplit', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'WinSeparator', { link = 'VertSplit' })
    hl(0, 'Folded', { fg = c.DarkBlue, bg = c.Gray75 })
    hl(0, 'FoldColumn', { fg = c.LineNumber }) -- see `:help fold-column`
    hl(0, 'SignColumn', { fg = c.Gray50, bg = c.Gray90 })
    hl(0, 'IncSearch', { bg = c.Yellow })
    hl(0, 'LineNr', { fg = c.Gray50, bg = c.Gray90 })
    hl(0, 'CursorLineNr', { fg = c.Gray50, bg = c.Gray90 })
    hl(0, 'MatchParen', { bg=c.Gray90, bold = true })
    hl(0, 'ModeMsg', { bold = true })
    hl(0, 'MoreMsg', { bold = true })
    hl(0, 'NonText', { fg = c.DarkGreen, bg = c.Gray90 })
    hl(0, 'Pmenu', { fg = c.PopupFront, bg = c.PopupBack })
    hl(0, 'PmenuSel', { fg = c.Front, bg = c.Yellow })
    hl(0, 'PmenuSbar', { bg = c.PopupHighlightGray })
    hl(0, 'PmenuThumb', { bg = c.PopupFront })
    hl(0, 'Question', { fg = c.Black, bg = c.Back, bold = true })
    hl(0, 'Search', { bg = c.Yellow })
    hl(0, 'SpecialKey', { fg = c.DarkBlue, bg = c.Back })
    hl(0, 'StatusLine', { fg = c.White, bg = c.Black, bold = true })
    hl(0, 'StatusLineNC', { fg = c.White, bg = c.Black })
    hl(0, 'TabLine', { fg = c.Front, bg = c.Gray75 })
    hl(0, 'TabLineFill', { fg = c.Front, bg = c.Back })
    hl(0, 'TabLineSel', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'Title', { fg = c.Black, bg = c.Back, bold = true })
    hl(0, 'Visual', { fg = c.Front, bg = c.Gray75 })
    hl(0, 'VisualNOS', { fg = c.White, bg = c.Selection })
    hl(0, 'WarningMsg', { fg = c.LightRed, bg = c.Back, bold = true })
    hl(0, 'WildMenu', { fg = c.White, bg = c.Selection, bold = true })
    hl(0, 'Comment', { fg = c.Gray50 })
    hl(0, 'Constant', { fg = c.DarkBlue })
    hl(0, 'String', { fg = c.DarkGreen })
    hl(0, 'Character', { fg = c.DarkGreen })
    hl(0, 'Number', { fg = c.LightGreen })
    hl(0, 'Boolean', { fg = c.DarkBlue })
    hl(0, 'Float', { fg = c.LightGreen })
    hl(0, 'Identifier', { fg = c.LightRed })
    hl(0, 'Function', { fg = c.LightRed })
    hl(0, 'Statement', { fg = c.LightRed })
    hl(0, 'Conditional', { fg = c.Purple })
    hl(0, 'Repeat', { fg = c.Purple })
    hl(0, 'Label', { fg = c.Blue })
    hl(0, 'Operator', { fg = c.LightRed })
    hl(0, 'Keyword', { fg = c.DarkBlue })
    hl(0, 'Exception', { fg = c.LightRed })
    hl(0, 'PreProc', { fg = c.Blue })
    hl(0, 'Include', { fg = c.Red })
    hl(0, 'Define', { fg = c.Purple })
    hl(0, 'Macro', { fg = c.Pink })
    hl(0, 'Type', { fg = c.LightRed, bg = c.None, bold = true })
    hl(0, 'StorageClass', { fg = c.DarkBlue })
    hl(0, 'Structure', { fg = c.Blue, bg = c.None, bold = true })
    hl(0, 'Typedef', { fg = c.Purple })
    hl(0, 'Special', { fg = c.DarkBlue })
    hl(0, 'SpecialChar', { fg = c.Front })
    hl(0, 'Tag', { fg = c.Front })
    hl(0, 'Delimiter', { fg = c.Front })
    hl(0, 'SpecialComment', { fg = c.Gray50 })
    hl(0, 'Debug', { fg = c.Front })
    hl(0, 'Underlined', { underline = true })
    hl(0, 'Conceal', { fg = c.Front, bg = c.Back })
    hl(0, 'Ignore', { fg = c.Front })
    hl(0, 'Error', { fg = c.White, bg = c.Red })
    hl(0, 'Todo', { bg = c.Yellow })
    hl(0, 'SpellBad', { bg = c.SpellBad })
    hl(0, 'SpellCap', { bg = c.SpellCap })
    hl(0, 'SpellRare', { bg = c.SpellRare })
    hl(0, 'SpellLocal', { bg = c.SpellLocal })
    hl(0, 'Whitespace', { fg = isDark and c.LineNumber or c.TabOther })
    hl(0, 'NormalFloat', { bg = c.PopupBack })
    hl(0, 'WinBar', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'WinBarNc', { fg = c.Front, bg = c.Back })

    -- Treesitter (see `:h treesitter-highlight-groups`)
    -- Neovim defines default links:
    -- https://github.com/neovim/neovim/blob/master/src/nvim/highlight_group.c#L240
    hl(0, '@error', { fg = c.Red }) -- Legacy
    hl(0, '@punctuation.bracket', { fg = c.Front })
    hl(0, '@punctuation.special', { fg = c.Front })
    hl(0, '@punctuation.delimiter', { fg = c.Front })
    hl(0, '@comment', { link = 'Comment' })
    hl(0, '@comment.note', { fg = c.Blue })
    hl(0, '@comment.warning', { fg = c.YellowOrange })
    hl(0, '@comment.error', { fg = c.Red })
    hl(0, '@string.regexp', { fg = c.DarkGreen })
    hl(0, '@string.special.url.comment', { underline = false })
    hl(0, '@string', { fg = c.DarkGreen })
    hl(0, '@character', { fg = c.DarkGreen })
    hl(0, '@annotation', { fg = c.DarkYellow })
    hl(0, '@attribute', { fg = c.DarkYellow })
    hl(0, '@attribute.builtin', { fg = c.BlueGreen })
    hl(0, '@module', { fg = c.BlueGreen })
    hl(0, '@function', { fg = c.LightRed })
    hl(0, '@function.builtin', { fg = c.LightRed })
    hl(0, '@function.macro', { fg = c.LightRed })
    hl(0, '@function.method', { fg = c.LightRed })
    hl(0, '@variable', { fg = c.None })
    hl(0, '@variable.builtin', { fg = c.None })
    hl(0, '@variable.parameter', { fg = c.None })
    hl(0, '@variable.parameter.reference', { fg = c.None })
    hl(0, '@variable.member', { fg = c.None })
    hl(0, '@property', { fg = c.DarkBlue })
    hl(0, '@constructor', { fg = c.Blue })
    hl(0, '@label', { fg = c.Blue })
    hl(0, '@type.qualifier', { fg = c.LightRed })
    hl(0, '@structure', { fg = c.Blue })
    hl(0, '@tag', { fg = c.Blue })
    hl(0, '@tag.builtin', { fg = c.Blue })
    hl(0, '@tag.delimiter', { link = 'Delimiter'})
    hl(0, '@tag.attribute', { fg = c.DarkBlue })

    hl(0, '@text', {}) -- Legacy
    hl(0, '@markup.strong', { bold = true })
    hl(0, '@markup.italic', { italic = true })
    hl(0, '@markup.underline', { underline = true })
    hl(0, '@markup.strikethrough', { strikethrough = true })
    hl(0, '@markup.heading', { bold = true })
    hl(0, '@markup.raw', { bg = c.Gray95 })
    hl(0, '@markup.quote.markdown', { bg = c.Gray95 })
    hl(0, '@markup.link', { fg = c.Front })
    hl(0, '@markup.link.label', { fg = c.DarkBlue })
    hl(0, '@markup.link.markdown_inline', { fg = c.DarkBlue })
    hl(0, '@markup.link.url', { fg = c.Gray50 })
    hl(0, '@markup.list.checked', { link = 'Todo' })
    hl(0, '@markup.list.unchecked', { link = 'Todo' })
    hl(0, '@markup.list.markdown', { fg=c.Orange })
    hl(0, '@textReference', { fg = c.Orange })
    hl(0, '@stringEscape', { fg = c.Orange, bg = c.None, bold = true })

    hl(0, '@diff.plus', { link = 'DiffAdd' })
    hl(0, '@diff.minus', { link = 'DiffDelete' })
    hl(0, '@diff.delta', { link = 'DiffChange' })

    -- LSP semantic tokens
    hl(0, '@type.builtin', { link = '@type' })
    hl(0, '@lsp.typemod.type.defaultLibrary', { link = '@type.builtin' })
    hl(0, '@lsp.type.type', { link = '@type' })
    hl(0, '@lsp.type.typeParameter', { link = '@type' })
    hl(0, '@lsp.type.macro', { link = '@constant' })
    hl(0, '@lsp.type.enumMember', { link = '@constant' })
    hl(0, '@lsp.typemod.variable.readonly', { link = '@constant' })
    hl(0, '@lsp.typemod.property.readonly', { link = '@constant' })
    hl(0, '@lsp.typemod.variable.constant', { link = '@constant' })
    hl(0, '@lsp.type.member', { link = '@function' })
    hl(0, '@lsp.type.keyword', { link = '@keyword' })
    hl(0, '@lsp.typemod.keyword.controlFlow', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@lsp.type.comment.c', { link = '@comment' })
    hl(0, '@lsp.type.comment.cpp', { link = '@comment' })
    hl(0, '@event', { link = 'Identifier' })
    hl(0, '@interface', { link = 'Identifier' })
    hl(0, '@modifier', { link = 'Identifier' })
    hl(0, '@regexp', { fg = c.Red, bg = c.None })
    hl(0, '@decorator', { link = 'Identifier' })

    -- Outline
    -- hl(0, 'OutlineCurrent', { link = 'WildMenu' })
    hl(0, 'OutlineCurrent', { bold = true })

    -- Julia
    hl(0, '@string.documentation.julia', { link = "String" })

    -- Git
    hl(0, 'gitcommitHeader', { fg = c.Gray, bg = c.None })
    hl(0, 'gitcommitOnBranch', { fg = c.Gray, bg = c.None })
    hl(0, 'gitcommitBranch', { fg = c.Pink, bg = c.None })
    hl(0, 'gitcommitComment', { fg = c.Gray, bg = c.None })
    hl(0, 'gitcommitSelectedType', { fg = c.Green, bg = c.None })
    hl(0, 'gitcommitSelectedFile', { fg = c.Green, bg = c.None })
    hl(0, 'gitcommitDiscardedType', { fg = c.Red, bg = c.None })
    hl(0, 'gitcommitDiscardedFile', { fg = c.Red, bg = c.None })
    hl(0, 'gitcommitOverflow', { fg = c.Red, bg = c.None })
    hl(0, 'gitcommitSummary', { fg = c.Pink, bg = c.None })
    hl(0, 'gitcommitBlank', { fg = c.Pink, bg = c.None })

    -- Gitgutter
    hl(0, 'GitGutterAdd', { fg = c.GitAdded, bg = c.Gray90 })
    hl(0, 'GitGutterChange', { fg = c.GitModified, bg = c.Gray90 })
    hl(0, 'GitGutterDelete', { fg = c.GitDeleted, bg = c.Gray90 })

    -- Git Signs
    hl(0, 'GitSignsAdd', { fg = c.GitAdded, bg = c.Gray90 })
    hl(0, 'GitSignsChange', { fg = c.GitModified, bg = c.Gray90 })
    hl(0, 'GitSignsDelete', { fg = c.GitDeleted, bg = c.Gray90 })
    hl(0, 'GitSignsAddLn', { fg = c.GitAdded, bg = c.Gray90 })
    hl(0, 'GitSignsChangeLn', { fg = c.GitModified, bg = c.Gray90 })
    hl(0, 'GitSignsDeleteLn', { fg = c.GitDeleted, bg = c.Gray90 })

    -- NvimTree
    hl(0, 'NvimTreeRootFolder', { fg = c.Front, bg = c.None, bold = true })
    hl(0, 'NvimTreeGitDirty', { fg = c.Yellow, bg = c.None })
    hl(0, 'NvimTreeGitNew', { fg = c.Green, bg = c.None })
    hl(0, 'NvimTreeImageFile', { fg = c.Violet, bg = c.None })
    hl(0, 'NvimTreeEmptyFolderName', { fg = c.Gray, bg = c.None })
    hl(0, 'NvimTreeFolderName', { fg = c.Front, bg = c.None })
    hl(0, 'NvimTreeSpecialFile', { fg = c.Pink, bg = c.None, underline = true })
    hl(0, 'NvimTreeNormal', { fg = c.Front, bg = opts.disable_nvimtree_bg and c.Back or c.LeftDark })
    hl(0, 'NvimTreeCursorLine', { link = 'CursorLine' })
    hl(0, 'NvimTreeVertSplit', { link = 'VertSplit' })
    hl(0, 'NvimTreeEndOfBuffer', { fg = opts.disable_nvimtree_bg and c.CursorLine or c.LeftDark })
    hl(
        0,
        'NvimTreeOpenedFolderName',
        { fg = c.None, bg = opts.disable_nvimtree_bg and c.CursorLine or c.LeftDark }
    )
    hl(0, 'NvimTreeGitRenamed', { fg = c.GitRenamed, bg = c.None })
    hl(0, 'NvimTreeGitIgnored', { fg = c.GitIgnored, bg = c.None })
    hl(0, 'NvimTreeGitDeleted', { fg = c.GitDeleted, bg = c.None })
    hl(0, 'NvimTreeGitStaged', { fg = c.GitStageModified, bg = c.None })
    hl(0, 'NvimTreeGitMerge', { fg = c.GitUntracked, bg = c.None })
    hl(0, 'NvimTreeGitDirty', { fg = c.GitModified, bg = c.None })
    hl(0, 'NvimTreeGitNew', { fg = c.GitAdded, bg = c.None })

    -- Bufferline
    hl(0, 'BufferLineIndicatorSelected', { fg = c.LeftDark, bg = c.None })
    hl(0, 'BufferLineFill', { fg = c.None, bg = opts.transparent and c.Back or c.LeftDark })

    -- Neotest
    hl(0, 'NeotestAdapterName', { fg = c.Front, bold = true })
    hl(0, 'NeotestDir', { fg = c.Blue })
    hl(0, 'NeotestExpandMarker', { fg = c.DimHighlight })
    hl(0, 'NeotestFailed', { fg = c.Red })
    hl(0, 'NeotestFile', { fg = c.Blue })
    hl(0, 'NeotestFocused', { bold = true })
    hl(0, 'NeotestIndent', { fg = c.DimHighlight })
    hl(0, 'NeotestMarked', { fg = c.YellowOrange, bold = true })
    hl(0, 'NeotestNamespace', { fg = c.Pink })
    hl(0, 'NeotestPassed', { fg = c.BlueGreen })
    hl(0, 'NeotestRunning', { fg = c.DarkYellow })
    hl(0, 'NeotestSkipped', { fg = c.Blue })
    hl(0, 'NeotestTarget', { fg = c.LightRed })
    hl(0, 'NeotestWatching', { fg = c.DarkYellow })
    hl(0, 'NeotestWinSelect', { fg = c.Blue, bold = true })

    -- LSP
    hl(0, 'DiagnosticOk', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'DiagnosticError', { fg = c.Red, bg = c.None })
    hl(0, 'DiagnosticWarn', { fg = c.Orange, bg = c.None })
    hl(0, 'DiagnosticInfo', { fg = c.Blue, bg = c.None })
    hl(0, 'DiagnosticHint', { fg = c.Blue, bg = c.None })
    hl(0, 'DiagnosticUnnecessary', { fg = c.DisabledBlue, bg = c.None })
    hl(0, 'DiagnosticUnderlineError', { fg = c.None, bg = c.None, undercurl = true, sp = c.Red })
    hl(0, 'DiagnosticUnderlineWarn', { fg = c.None, bg = c.None, undercurl = true, sp = c.Yellow })
    hl(0, 'DiagnosticUnderlineInfo', { fg = c.None, bg = c.None, undercurl = true, sp = c.Blue })
    hl(0, 'DiagnosticUnderlineHint', { fg = c.None, bg = c.None, undercurl = true, sp = c.Blue })
    hl(0, 'LspReferenceText', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'LspReferenceRead', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'LspReferenceWrite', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })

    -- COC.nvim
    hl(0, 'CocHighlightText', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'CocHighlightRead', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'CocHighlightWrite', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })

    -- Nvim compe
    hl(0, 'CmpItemKindVariable', { fg = c.LightBlue, bg = c.None })
    hl(0, 'CmpItemKindInterface', { fg = c.LightBlue, bg = c.None })
    hl(0, 'CmpItemKindText', { fg = c.LightBlue, bg = c.None })
    hl(0, 'CmpItemKindFunction', { fg = c.Pink, bg = c.None })
    hl(0, 'CmpItemKindMethod', { fg = c.Pink, bg = c.None })
    hl(0, 'CmpItemKindKeyword', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemKindProperty', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemKindUnit', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemKindConstructor', { fg = c.UiOrange, bg = c.None })
    hl(0, 'CmpItemMenu', { fg = c.PopupFront, bg = c.None })
    hl(0, 'CmpItemAbbr', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemAbbrDeprecated', { fg = c.CursorDark, bg = c.PopupBack, strikethrough = true })
    hl(0, 'CmpItemAbbrMatch', { fg = isDark and c.MediumBlue or c.DarkBlue, bg = c.None, bold = true })
    hl(0, 'CmpItemAbbrMatchFuzzy', { fg = isDark and c.MediumBlue or c.DarkBlue, bg = c.None, bold = true })

    -- rcarriga/nvim-dap-ui
    -- Source: https://github.com/rcarriga/nvim-dap-ui/blob/master/lua/dapui/config/highlights.lua
    hl(0, 'DapUIBreakpointsCurrentLine', { fg = c.BlueGreen, bold = true })
    hl(0, 'DapUIBreakpointsDisabledLine', { fg = c.DimHighlight })
    hl(0, 'DapUIBreakpointsInfo', { fg = c.BlueGreen })
    hl(0, 'DapUIBreakpointsLine', { fg = c.Pink })
    hl(0, 'DapUIBreakpointsPath', { fg = c.Pink })
    hl(0, 'DapUICurrentFrameName', { fg = c.BlueGreen, bold = true })
    hl(0, 'DapUIDecoration', { fg = c.Pink })
    hl(0, 'DapUIFloatBorder', { fg = c.Pink })
    hl(0, 'DapUILineNumber', { fg = c.Pink })
    hl(0, 'DapUIModifiedValue', { fg = c.Pink, bold = true })
    hl(0, 'DapUIPlayPause', { fg = c.BlueGreen })
    hl(0, 'DapUIPlayPauseNC', { fg = c.BlueGreen })
    hl(0, 'DapUIRestart', { fg = c.BlueGreen })
    hl(0, 'DapUIRestartNC', { fg = c.BlueGreen })
    hl(0, 'DapUIScope', { fg = c.Pink })
    hl(0, 'DapUISource', { fg = c.MediumBlue })
    hl(0, 'DapUIStepBack', { fg = c.Pink })
    hl(0, 'DapUIStepBackNC', { fg = c.Pink })
    hl(0, 'DapUIStepInto', { fg = c.Pink })
    hl(0, 'DapUIStepIntoNC', { fg = c.Pink })
    hl(0, 'DapUIStepOut', { fg = c.Pink })
    hl(0, 'DapUIStepOutNC', { fg = c.Pink })
    hl(0, 'DapUIStepOver', { fg = c.Pink })
    hl(0, 'DapUIStepOverNC', { fg = c.Pink })
    hl(0, 'DapUIStop', { fg = c.Red })
    hl(0, 'DapUIStopNC', { fg = c.Red })
    hl(0, 'DapUIStoppedThread', { fg = c.Pink })
    hl(0, 'DapUIThread', { fg = c.BlueGreen })
    hl(0, 'DapUIType', { fg = c.Pink })
    hl(0, 'DapUIUnavailable', { fg = c.DimHighlight })
    hl(0, 'DapUIUnavailableNC', { fg = c.DimHighlight })
    hl(0, 'DapUIWatchesEmpty', { fg = c.DimHighlight })
    hl(0, 'DapUIWatchesError', { fg = c.Red })
    hl(0, 'DapUIWatchesValue', { fg = c.BlueGreen })
    hl(0, 'DapUIWinSelect', { fg = c.Pink, bold = true })

end

theme.link_highlight = function()
    -- Legacy groups for official git.vim and diff.vim syntax
    hl(0, 'diffAdded', { link = 'DiffAdd' })
    hl(0, 'diffChanged', { link = 'DiffChange' })
    hl(0, 'diffRemoved', { link = 'DiffDelete' })
    -- Legacy groups for treesitter
    hl(0, '@parameter', { link = '@variable.parameter' })
    hl(0, '@field', { link = '@variable.member' })
    hl(0, '@string.regex', { link = '@string.regexp' })
    hl(0, '@float', { link = '@number.float' })
    hl(0, '@namespace', { link = '@module' })
    hl(0, '@method', { link = '@function.method' })
    hl(0, '@field', { link = '@variable.member' })
    hl(0, '@conditional', { link = '@keyword.conditional' })
    hl(0, '@repeat', { link = '@keyword.repeat' })
    hl(0, '@exception', { link = '@keyword.exception' })
    hl(0, '@storageclass', { link = '@keyword.storage' })
    hl(0, '@include', { link = '@keyword.import' })
    hl(0, '@text.strong', { link = '@markup.strong' })
    hl(0, '@text.underline', { link = '@markup.underline' })
    hl(0, '@text.emphasis', { link = '@markup.italic' })
    hl(0, '@text.strike', { link = '@markup.strikethrough' })
    hl(0, '@text.title', { link = '@markup.heading' })
    hl(0, '@text.uri', { link = '@markup.link.url' })
    hl(0, '@text.literal', { link = '@markup.raw' })
    hl(0, '@text.note', { link = '@comment.note' })
    hl(0, '@text.warning', { link = '@comment.warning' })
    hl(0, '@text.danger', { link = '@comment.error' })
    hl(0, '@text.diff.add', { link = '@diff.plus' })
    hl(0, '@text.diff.delete', { link = '@diff.minus' })
    -- Nvim compe
    hl(0, 'CompeDocumentation', { link = 'Pmenu' })
    hl(0, 'CompeDocumentationBorder', { link = 'Pmenu' })
    hl(0, 'CmpItemKind', { link = 'Pmenu' })
    hl(0, 'CmpItemKindClass', { link = 'CmpItemKindConstructor' })
    hl(0, 'CmpItemKindModule', { link = 'CmpItemKindKeyword' })
    hl(0, 'CmpItemKindOperator', { link = '@operator' })
    hl(0, 'CmpItemKindReference', { link = '@variable.parameter.reference' })
    hl(0, 'CmpItemKindValue', { link = '@variable.member' })
    hl(0, 'CmpItemKindField', { link = '@variable.member' })
    hl(0, 'CmpItemKindEnum', { link = '@variable.member' })
    hl(0, 'CmpItemKindSnippet', { link = '@text' })
    hl(0, 'CmpItemKindColor', { link = 'cssColor' })
    hl(0, 'CmpItemKindFile', { link = '@text.uri' })
    hl(0, 'CmpItemKindFolder', { link = '@text.uri' })
    hl(0, 'CmpItemKindEvent', { link = '@constant' })
    hl(0, 'CmpItemKindEnumMember', { link = '@variable.member' })
    hl(0, 'CmpItemKindConstant', { link = '@constant' })
    hl(0, 'CmpItemKindStruct', { link = '@structure' })
    hl(0, 'CmpItemKindTypeParameter', { link = '@variable.parameter' })
end

return theme
