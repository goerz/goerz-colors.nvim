local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function(opts)
    local c = require('goerz.colors').get_colors()
    local isDark = vim.o.background == 'dark'

    hl(0, 'Normal', { fg = c.Front, bg = c.Back })
    hl(0, 'ColorColumn', { fg = c.None, bg = c.ColorColumn })
    hl(0, 'Cursor', { fg = c.CursorDark, bg = c.CursorLight })
    hl(0, 'CursorLine', { bg = c.CursorLine })
    hl(0, 'CursorColumn', { fg = c.None, bg = c.CursorLine })
    hl(0, 'Directory', { fg = c.Blue, bg = c.Back })
    hl(0, 'DiffAdd', { fg = c.None, bg = c.DiffAddLight })
    hl(0, 'DiffChange', { fg = c.None, bg = c.DiffChange })
    hl(0, 'DiffDelete', { fg = c.None, bg = c.DiffChangeLight })
    hl(0, 'DiffText', { fg = c.None, bg = c.DiffChangeLight })
    hl(0, 'EndOfBuffer', { fg = c.DarkGreen, bg = c.Gray90 })
    hl(0, 'ErrorMsg', { fg = c.White, bg = c.Red })
    hl(0, 'VertSplit', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'WinSeparator', { link = 'VertSplit' })
    hl(0, 'Folded', { fg = c.DarkBlue, bg = c.Gray75 })
    hl(0, 'FoldColumn', { fg = c.LineNumber, bg = c.Back })
    hl(0, 'SignColumn', { fg = c.Gray50, bg = c.Gray90 })
    hl(0, 'IncSearch', { fg = c.White, bg = c.Yellow })
    hl(0, 'LineNr', { fg = c.Gray50, bg = c.Gray90 })
    hl(0, 'CursorLineNr', { fg = c.Gray50, bg = c.Gray90 })
    hl(0, 'MatchParen', { fg = c.None, bg = c.Orange })
    hl(0, 'ModeMsg', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'MoreMsg', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'NonText', { fg = c.DarkGreen, bg = c.Gray90 })
    hl(0, 'Pmenu', { fg = c.PopupFront, bg = c.PopupBack })
    hl(0, 'PmenuSel', { fg = c.Foreground, bg = c.Yellow })
    hl(0, 'PmenuSbar', { fg = c.None, bg = c.PopupHighlightGray })
    hl(0, 'PmenuThumb', { fg = c.None, bg = c.PopupFront })
    hl(0, 'Question', { fg = c.Black, bg = c.Back, bold = true })
    hl(0, 'Search', { fg = c.White, bg = c.Yellow })
    hl(0, 'SpecialKey', { fg = c.DarkBlue, bg = c.Back })
    hl(0, 'StatusLine', { fg = c.White, bg = c.Black, bold = true })
    hl(0, 'StatusLineNC', { fg = c.White, bg = c.Black })
    hl(0, 'TabLine', { fg = c.Front, bg = c.Gray75 })
    hl(0, 'TabLineFill', { fg = c.Front, bg = c.Back })
    hl(0, 'TabLineSel', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'Title', { fg = c.Black, bg = c.Back, bold = true })
    hl(0, 'Visual', { fg = c.Front, bg = c.Gray75 })
    hl(0, 'VisualNOS', { fg = c.None, bg = c.Selection })
    hl(0, 'WarningMsg', { fg = c.LightRed, bg = c.Back, bold = true })
    hl(0, 'WildMenu', { fg = c.None, bg = c.Selection })
    hl(0, 'Comment', { fg = c.Gray50, bg = c.None })
    hl(0, 'Constant', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'String', { fg = c.DarkGreen, bg = c.None })
    hl(0, 'Character', { fg = c.DarkGreen, bg = c.None })
    hl(0, 'Number', { fg = c.LightGreen, bg = c.None })
    hl(0, 'Boolean', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'Float', { fg = c.LightGreen, bg = c.None })
    hl(0, 'Identifier', { fg = c.LightRed, bg = c.None })
    hl(0, 'Function', { fg = c.LightRed, bg = c.None })
    hl(0, 'Statement', { fg = c.LightRed, bg = c.None })
    hl(0, 'Conditional', { fg = c.Purple, bg = c.None })
    hl(0, 'Repeat', { fg = c.Purple, bg = c.None })
    hl(0, 'Label', { fg = c.Blue, bg = c.None })
    hl(0, 'Operator', { fg = c.LightRed, bg = c.None })
    hl(0, 'Keyword', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'Exception', { fg = c.LightRed, bg = c.None })
    hl(0, 'PreProc', { fg = c.Blue, bg = c.None })
    hl(0, 'Include', { fg = c.Red, bg = c.None })
    hl(0, 'Define', { fg = c.Purple, bg = c.None })
    hl(0, 'Macro', { fg = c.Pink, bg = c.None })
    hl(0, 'Type', { fg = c.LightRed, bg = c.None, bold = true })
    hl(0, 'StorageClass', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'Structure', { fg = c.Blue, bg = c.None, bold = true })
    hl(0, 'Typedef', { fg = c.Purple, bg = c.None })
    hl(0, 'Special', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'SpecialChar', { fg = c.Front, bg = c.None })
    hl(0, 'Tag', { fg = c.Front, bg = c.None })
    hl(0, 'Delimiter', { fg = c.Front, bg = c.None })
    hl(0, 'SpecialComment', { fg = c.Gray50, bg = c.None })
    hl(0, 'Debug', { fg = c.Front, bg = c.None })
    hl(0, 'Underlined', { fg = c.Front, bg = c.None, underline = true })
    hl(0, 'Conceal', { fg = c.Front, bg = c.Back })
    hl(0, 'Ignore', { fg = c.Front, bg = c.None })
    hl(0, 'Error', { fg = c.White, bg = c.Red })
    hl(0, 'Todo', { fg = c.None, bg = c.Yellow })
    hl(0, 'SpellBad', { fg = c.None, bg = c.SpellBad })
    hl(0, 'SpellCap', { fg = c.None, bg = c.SpellCap })
    hl(0, 'SpellRare', { fg = c.None, bg = c.SpellRare })
    hl(0, 'SpellLocal', { fg = c.None, bg = c.SpellLocal })
    hl(0, 'Whitespace', { fg = isDark and c.LineNumber or c.TabOther })
    hl(0, 'NormalFloat', { bg = c.PopupBack })
    hl(0, 'WinBar', { fg = c.Front, bg = c.Back, bold = true })
    hl(0, 'WinBarNc', { fg = c.Front, bg = c.Back })

    -- Treesitter
    hl(0, '@error', { fg = c.Red, bg = c.None }) -- Legacy
    hl(0, '@punctuation.bracket', { fg = c.Front, bg = c.None })
    hl(0, '@punctuation.special', { fg = c.Front, bg = c.None })
    hl(0, '@punctuation.delimiter', { fg = c.Front, bg = c.None })
    hl(0, '@comment', { fg = c.Gray50, bg = c.None })
    hl(0, '@comment.note', { fg = c.BlueGreen, bg = c.None, bold = true })
    hl(0, '@comment.warning', { fg = c.YellowOrange, bg = c.None, bold = true })
    hl(0, '@comment.error', { fg = c.Red, bg = c.None, bold = true })
    hl(0, '@constant', { fg = c.Blue, bg = c.None })
    hl(0, '@constant.builtin', { fg = c.Blue, bg = c.None })
    hl(0, '@constant.macro', { fg = c.BlueGreen, bg = c.None })
    hl(0, '@string.regexp', { fg = c.DarkGreen, bg = c.None })
    hl(0, '@string', { fg = c.DarkGreen, bg = c.None })
    hl(0, '@character', { fg = c.DarkGreen, bg = c.None })
    hl(0, '@number', { fg = c.LightGreen, bg = c.None })
    hl(0, '@number.float', { fg = c.LightGreen, bg = c.None })
    hl(0, '@boolean', { fg = c.Blue, bg = c.None })
    hl(0, '@annotation', { fg = c.DarkYellow, bg = c.None })
    hl(0, '@attribute', { fg = c.DarkYellow, bg = c.None })
    hl(0, '@attribute.builtin', { fg = c.BlueGreen, bg = c.None })
    hl(0, '@module', { fg = c.BlueGreen, bg = c.None })
    hl(0, '@function', { fg = c.LightRed, bg = c.None })
    hl(0, '@function.builtin', { fg = c.LightRed, bg = c.None })
    hl(0, '@function.macro', { fg = c.LightRed, bg = c.None })
    hl(0, '@function.method', { fg = c.LightRed, bg = c.None })
    hl(0, '@variable', { fg = c.None, bg = c.None })
    hl(0, '@variable.builtin', { fg = c.None, bg = c.None })
    hl(0, '@variable.parameter', { fg = c.None, bg = c.None })
    hl(0, '@variable.parameter.reference', { fg = c.None, bg = c.None })
    hl(0, '@variable.member', { fg = c.None, bg = c.None })
    hl(0, '@property', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@constructor', { fg = c.Blue, bg = c.None })
    hl(0, '@label', { fg = c.Blue, bg = c.None })
    hl(0, '@keyword', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@keyword.conditional', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@keyword.repeat', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@keyword.return', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@keyword.exception', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@keyword.import', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@operator', { link = 'Operator' })
    hl(0, '@type', { fg = c.BlueGreen, bg = c.None })
    hl(0, '@type.qualifier', { fg = c.Blue, bg = c.None })
    hl(0, '@structure', { fg = c.Blue, bg = c.None })
    hl(0, '@tag', { fg = c.Blue, bg = c.None })
    hl(0, '@tag.builtin', { fg = c.Blue, bg = c.None })
    hl(0, '@tag.delimiter', { fg = c.Gray50, bg = c.None })
    hl(0, '@tag.attribute', { fg = c.LightBlue, bg = c.None })

    hl(0, '@text', { fg = c.Front, bg = c.None }) -- Legacy
    hl(0, '@markup.strong', { fg = c.Blue, bg = c.None, bold = true })
    hl(0, '@markup.italic', { fg = c.Front, bg = c.None })
    hl(0, '@markup.underline', { fg = c.YellowOrange, bg = c.None, underline = true })
    hl(0, '@markup.strikethrough', { fg = c.Front, bg = c.None })
    hl(0, '@markup.heading', { fg = c.Blue, bg = c.None, bold = true })
    hl(0, '@markup.raw', { fg = c.Front, bg = c.None })
    hl(0, '@markup.raw.markdown', { fg = c.Orange, bg = c.None })
    hl(0, '@markup.raw.markdown_inline', { fg = c.Orange, bg = c.None })
    hl(0, '@markup.link.label', { fg = c.LightBlue, bg = c.None })
    hl(0, '@markup.link.url', { fg = c.Front, bg = c.None })
    hl(0, '@markup.list.checked', { link = 'Todo' })
    hl(0, '@markup.list.unchecked', { link = 'Todo' })
    hl(0, '@textReference', { fg = c.Orange })
    hl(0, '@stringEscape', { fg = c.Orange, bg = c.None, bold = true })

    hl(0, '@diff.plus', { link = 'DiffAdd' })
    hl(0, '@diff.minus', { link = 'DiffDelete' })
    hl(0, '@diff.delta', { link = 'DiffChange' })

    -- LSP semantic tokens
    hl(0, '@type.builtin', { link = '@type' })
    hl(0, '@lsp.typemod.type.defaultLibrary', { link = '@type.builtin' })
    hl(0, '@lsp.type.type', { link = '@type' })
    hl(0, '@lsp.type.typeParameter', { link = '@type' })
    hl(0, '@lsp.type.macro', { link = '@constant' })
    hl(0, '@lsp.type.enumMember', { link = '@constant' })
    hl(0, '@lsp.typemod.variable.readonly', { link = '@constant' })
    hl(0, '@lsp.typemod.property.readonly', { link = '@constant' })
    hl(0, '@lsp.typemod.variable.constant', { link = '@constant' })
    hl(0, '@lsp.type.member', { link = '@function' })
    hl(0, '@lsp.type.keyword', { link = '@keyword' })
    hl(0, '@lsp.typemod.keyword.controlFlow', { fg = c.DarkBlue, bg = c.None })
    hl(0, '@lsp.type.comment.c', { fg = c.Gray50, bg = c.None })
    hl(0, '@lsp.type.comment.cpp', { fg = c.Gray50, bg = c.None })
    hl(0, '@event', { link = 'Identifier' })
    hl(0, '@interface', { link = 'Identifier' })
    hl(0, '@modifier', { link = 'Identifier' })
    hl(0, '@regexp', { fg = c.Red, bg = c.None })
    hl(0, '@decorator', { link = 'Identifier' })

    -- Markdown
    hl(0, 'markdownBold', { fg = c.DarkBlue, bg = c.None, bold = true })
    hl(0, 'markdownCode', { fg = c.DarkGreen, bg = c.None })
    hl(0, 'markdownRule', { fg = c.DarkBlue, bg = c.None, bold = true })
    hl(0, 'markdownCodeDelimiter', { fg = c.Front, bg = c.None })
    hl(0, 'markdownHeadingDelimiter', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'markdownFootnote', { fg = c.Orange, bg = c.None })
    hl(0, 'markdownFootnoteDefinition', { fg = c.Orange, bg = c.None })
    hl(0, 'markdownUrl', { fg = c.Front, bg = c.None, underline = true })
    hl(0, 'markdownLinkText', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'markdownEscape', { fg = c.Orange, bg = c.None })

    -- Asciidoc
    hl(0, 'asciidocAttributeEntry', { fg = c.YellowOrange })
    hl(0, 'asciidocAttributeList', { fg = c.Pink })
    hl(0, 'asciidocAttributeRef', { fg = c.YellowOrange })
    hl(0, 'asciidocHLabel', { fg = c.Blue, bold = true })
    hl(0, 'asciidocListingBlock', { fg = c.Orange })
    hl(0, 'asciidocMacroAttributes', { fg = c.YellowOrange })
    hl(0, 'asciidocOneLineTitle', { fg = c.Blue, bold = true })
    hl(0, 'asciidocPassthroughBlock', { fg = c.Blue })
    hl(0, 'asciidocQuotedMonospaced', { fg = c.Orange })
    hl(0, 'asciidocTriplePlusPassthrough', { fg = c.DarkYellow })
    hl(0, 'asciidocMacro', { fg = c.Pink })
    hl(0, 'asciidocAdmonition', { fg = c.Orange })
    hl(0, 'asciidocQuotedEmphasized', { fg = c.Blue })
    hl(0, 'asciidocQuotedEmphasized2', { fg = c.Blue })
    hl(0, 'asciidocQuotedEmphasizedItalic', { fg = c.Blue })
    hl(0, 'asciidocBackslash', { link = 'Keyword' })
    hl(0, 'asciidocQuotedBold', { link = 'markdownBold' })
    hl(0, 'asciidocQuotedMonospaced2', { link = 'asciidocQuotedMonospaced' })
    hl(0, 'asciidocQuotedUnconstrainedBold', { link = 'asciidocQuotedBold' })
    hl(0, 'asciidocQuotedUnconstrainedEmphasized', { link = 'asciidocQuotedEmphasized' })
    hl(0, 'asciidocURL', { link = 'markdownUrl' })

    -- JSON
    hl(0, 'jsonKeyword', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsonEscape', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'jsonNull', { fg = c.Blue, bg = c.None })
    hl(0, 'jsonBoolean', { fg = c.Blue, bg = c.None })

    -- HTML
    hl(0, 'htmlTag', { fg = c.Gray, bg = c.None })
    hl(0, 'htmlEndTag', { fg = c.Gray, bg = c.None })
    hl(0, 'htmlTagName', { fg = c.Blue, bg = c.None })
    hl(0, 'htmlSpecialTagName', { fg = c.Blue, bg = c.None })
    hl(0, 'htmlArg', { fg = c.LightBlue, bg = c.None })

    -- PHP
    hl(0, 'phpStaticClasses', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'phpMethod', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'phpClass', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'phpFunction', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'phpInclude', { fg = c.Blue, bg = c.None })
    hl(0, 'phpUseClass', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'phpRegion', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'phpMethodsVar', { fg = c.LightBlue, bg = c.None })

    -- CSS
    hl(0, 'cssBraces', { fg = c.Front, bg = c.None })
    hl(0, 'cssInclude', { fg = c.Pink, bg = c.None })
    hl(0, 'cssTagName', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'cssClassName', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'cssPseudoClass', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'cssPseudoClassId', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'cssPseudoClassLang', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'cssIdentifier', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'cssProp', { fg = c.LightBlue, bg = c.None })
    hl(0, 'cssDefinition', { fg = c.LightBlue, bg = c.None })
    hl(0, 'cssAttr', { fg = c.Orange, bg = c.None })
    hl(0, 'cssAttrRegion', { fg = c.Orange, bg = c.None })
    hl(0, 'cssColor', { fg = c.Orange, bg = c.None })
    hl(0, 'cssFunction', { fg = c.Orange, bg = c.None })
    hl(0, 'cssFunctionName', { fg = c.Orange, bg = c.None })
    hl(0, 'cssVendor', { fg = c.Orange, bg = c.None })
    hl(0, 'cssValueNumber', { fg = c.Orange, bg = c.None })
    hl(0, 'cssValueLength', { fg = c.Orange, bg = c.None })
    hl(0, 'cssUnitDecorators', { fg = c.Orange, bg = c.None })
    hl(0, 'cssStyle', { fg = c.LightBlue, bg = c.None })
    hl(0, 'cssImportant', { fg = c.Blue, bg = c.None })

    -- JavaScript
    hl(0, 'jsVariableDef', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsFuncArgs', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsFuncBlock', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsRegexpString', { fg = c.LightRed, bg = c.None })
    hl(0, 'jsThis', { fg = c.Blue, bg = c.None })
    hl(0, 'jsOperatorKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'jsDestructuringBlock', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsObjectKey', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsGlobalObjects', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'jsModuleKeyword', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsClassDefinition', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'jsClassKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'jsExtendsKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'jsExportDefault', { fg = c.Pink, bg = c.None })
    hl(0, 'jsFuncCall', { fg = c.Yellow, bg = c.None })
    hl(0, 'jsObjectValue', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsParen', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsObjectProp', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsIfElseBlock', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsParenIfElse', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsSpreadOperator', { fg = c.LightBlue, bg = c.None })
    hl(0, 'jsSpreadExpression', { fg = c.LightBlue, bg = c.None })

    -- Typescript
    hl(0, 'typescriptLabel', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptExceptions', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptBraces', { fg = c.Front, bg = c.None })
    hl(0, 'typescriptEndColons', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptParens', { fg = c.Front, bg = c.None })
    hl(0, 'typescriptDocTags', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptDocComment', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptLogicSymbols', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptImport', { fg = c.Pink, bg = c.None })
    hl(0, 'typescriptBOM', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptVariableDeclaration', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptVariable', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptExport', { fg = c.Pink, bg = c.None })
    hl(0, 'typescriptAliasDeclaration', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptAliasKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptClassName', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptAccessibilityModifier', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptOperator', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptArrowFunc', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptMethodAccessor', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptMember', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'typescriptTypeReference', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptTemplateSB', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'typescriptArrowFuncArg', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptParamImpl', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptFuncComma', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptCastKeyword', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptCall', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptCase', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptReserved', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'typescriptDefault', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptDecorator', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'typescriptPredefinedType', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptClassHeritage', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptClassExtends', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptClassKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptBlock', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptDOMDocProp', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptTemplateSubstitution', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptClassBlock', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptFuncCallArg', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptIndexExpr', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptConditionalParen', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptArray', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'typescriptES6SetProp', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptObjectLiteral', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptTypeParameter', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptEnumKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptEnum', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptLoopParen', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptParenExp', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptModule', { fg = c.LightBlue, bg = c.None })
    hl(0, 'typescriptAmbientDeclaration', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptFuncTypeArrow', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptInterfaceHeritage', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptInterfaceName', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptInterfaceKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptInterfaceExtends', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptGlobal', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'typescriptAsyncFuncKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptFuncKeyword', { fg = c.Blue, bg = c.None })
    hl(0, 'typescriptGlobalMethod', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'typescriptPromiseMethod', { fg = c.DarkYellow, bg = c.None })

    -- XML
    hl(0, 'xmlTag', { fg = c.Blue, bg = c.None })
    hl(0, 'xmlTagName', { fg = c.Blue, bg = c.None })
    hl(0, 'xmlEndTag', { fg = c.Blue, bg = c.None })

    -- Ruby
    hl(0, 'rubyClassNameTag', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'rubyClassName', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'rubyModuleName', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'rubyConstant', { fg = c.BlueGreen, bg = c.None })

    -- Golang
    hl(0, 'goPackage', { fg = c.Blue, bg = c.None })
    hl(0, 'goImport', { fg = c.Blue, bg = c.None })
    hl(0, 'goVar', { fg = c.Blue, bg = c.None })
    hl(0, 'goConst', { fg = c.Blue, bg = c.None })
    hl(0, 'goStatement', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'goType', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'goSignedInts', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'goUnsignedInts', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'goFloats', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'goComplexes', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'goBuiltins', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'goBoolean', { fg = c.Blue, bg = c.None })
    hl(0, 'goPredefinedIdentifiers', { fg = c.Blue, bg = c.None })
    hl(0, 'goTodo', { fg = c.Green, bg = c.None })
    hl(0, 'goDeclaration', { fg = c.Blue, bg = c.None })
    hl(0, 'goDeclType', { fg = c.Blue, bg = c.None })
    hl(0, 'goTypeDecl', { fg = c.Blue, bg = c.None })
    hl(0, 'goTypeName', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'goVarAssign', { fg = c.LightBlue, bg = c.None })
    hl(0, 'goVarDefs', { fg = c.LightBlue, bg = c.None })
    hl(0, 'goReceiver', { fg = c.Front, bg = c.None })
    hl(0, 'goReceiverType', { fg = c.Front, bg = c.None })
    hl(0, 'goFunctionCall', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'goMethodCall', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'goSingleDecl', { fg = c.LightBlue, bg = c.None })

    -- Python
    hl(0, 'pythonStatement', { fg = c.Blue, bg = c.None })
    hl(0, 'pythonOperator', { fg = c.Blue, bg = c.None })
    hl(0, 'pythonException', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'pythonExClass', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'pythonBuiltinObj', { fg = c.LightBlue, bg = c.None })
    hl(0, 'pythonBuiltinType', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'pythonBoolean', { fg = c.Blue, bg = c.None })
    hl(0, 'pythonNone', { fg = c.Blue, bg = c.None })
    hl(0, 'pythonTodo', { fg = c.Blue, bg = c.None })
    hl(0, 'pythonClassVar', { fg = c.Blue, bg = c.None })
    hl(0, 'pythonClassDef', { fg = c.BlueGreen, bg = c.None })

    -- TeX
    hl(0, 'texStatement', { fg = c.Blue, bg = c.None })
    hl(0, 'texBeginEnd', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'texBeginEndName', { fg = c.LightBlue, bg = c.None })
    hl(0, 'texOption', { fg = c.LightBlue, bg = c.None })
    hl(0, 'texBeginEndModifier', { fg = c.LightBlue, bg = c.None })
    hl(0, 'texDocType', { fg = c.Pink, bg = c.None })
    hl(0, 'texDocTypeArgs', { fg = c.LightBlue, bg = c.None })

    -- Git
    hl(0, 'gitcommitHeader', { fg = c.Gray, bg = c.None })
    hl(0, 'gitcommitOnBranch', { fg = c.Gray, bg = c.None })
    hl(0, 'gitcommitBranch', { fg = c.Pink, bg = c.None })
    hl(0, 'gitcommitComment', { fg = c.Gray, bg = c.None })
    hl(0, 'gitcommitSelectedType', { fg = c.Green, bg = c.None })
    hl(0, 'gitcommitSelectedFile', { fg = c.Green, bg = c.None })
    hl(0, 'gitcommitDiscardedType', { fg = c.Red, bg = c.None })
    hl(0, 'gitcommitDiscardedFile', { fg = c.Red, bg = c.None })
    hl(0, 'gitcommitOverflow', { fg = c.Red, bg = c.None })
    hl(0, 'gitcommitSummary', { fg = c.Pink, bg = c.None })
    hl(0, 'gitcommitBlank', { fg = c.Pink, bg = c.None })

    -- Lua
    hl(0, 'luaFuncCall', { fg = c.DarkYellow, bg = c.None })
    hl(0, 'luaFuncArgName', { fg = c.LightBlue, bg = c.None })
    hl(0, 'luaFuncKeyword', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'luaLocal', { fg = c.Pink, bg = c.None })
    hl(0, 'luaBuiltIn', { fg = c.Blue, bg = c.None })

    -- SH
    hl(0, 'shDeref', { fg = c.LightBlue, bg = c.None })
    hl(0, 'shVariable', { fg = c.LightBlue, bg = c.None })

    -- SQL
    hl(0, 'sqlKeyword', { fg = c.DarkBlue, bg = c.None })
    hl(0, 'sqlFunction', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'sqlOperator', { fg = c.DarkBlue, bg = c.None })

    -- YAML
    hl(0, 'yamlKey', { fg = c.Blue, bg = c.None })
    hl(0, 'yamlConstant', { fg = c.Blue, bg = c.None })

    -- Gitgutter
    hl(0, 'GitGutterAdd', { fg = c.GitAdded, bg = c.Gray90 })
    hl(0, 'GitGutterChange', { fg = c.GitModified, bg = c.Gray90 })
    hl(0, 'GitGutterDelete', { fg = c.GitDeleted, bg = c.Gray90 })

    -- Git Signs
    hl(0, 'GitSignsAdd', { fg = c.GitAdded, bg = c.Gray90 })
    hl(0, 'GitSignsChange', { fg = c.GitModified, bg = c.Gray90 })
    hl(0, 'GitSignsDelete', { fg = c.GitDeleted, bg = c.Gray90 })
    hl(0, 'GitSignsAddLn', { fg = c.GitAdded, bg = c.Gray90 })
    hl(0, 'GitSignsChangeLn', { fg = c.GitModified, bg = c.Gray90 })
    hl(0, 'GitSignsDeleteLn', { fg = c.GitDeleted, bg = c.Gray90 })

    -- NvimTree
    hl(0, 'NvimTreeRootFolder', { fg = c.Front, bg = c.None, bold = true })
    hl(0, 'NvimTreeGitDirty', { fg = c.Yellow, bg = c.None })
    hl(0, 'NvimTreeGitNew', { fg = c.Green, bg = c.None })
    hl(0, 'NvimTreeImageFile', { fg = c.Violet, bg = c.None })
    hl(0, 'NvimTreeEmptyFolderName', { fg = c.Gray, bg = c.None })
    hl(0, 'NvimTreeFolderName', { fg = c.Front, bg = c.None })
    hl(0, 'NvimTreeSpecialFile', { fg = c.Pink, bg = c.None, underline = true })
    hl(0, 'NvimTreeNormal', { fg = c.Front, bg = opts.disable_nvimtree_bg and c.Back or c.LeftDark })
    hl(0, 'NvimTreeCursorLine', { link = 'CursorLine' })
    hl(0, 'NvimTreeVertSplit', { link = 'VertSplit' })
    hl(0, 'NvimTreeEndOfBuffer', { fg = opts.disable_nvimtree_bg and c.CursorLine or c.LeftDark })
    hl(
        0,
        'NvimTreeOpenedFolderName',
        { fg = c.None, bg = opts.disable_nvimtree_bg and c.CursorLine or c.LeftDark }
    )
    hl(0, 'NvimTreeGitRenamed', { fg = c.GitRenamed, bg = c.None })
    hl(0, 'NvimTreeGitIgnored', { fg = c.GitIgnored, bg = c.None })
    hl(0, 'NvimTreeGitDeleted', { fg = c.GitDeleted, bg = c.None })
    hl(0, 'NvimTreeGitStaged', { fg = c.GitStageModified, bg = c.None })
    hl(0, 'NvimTreeGitMerge', { fg = c.GitUntracked, bg = c.None })
    hl(0, 'NvimTreeGitDirty', { fg = c.GitModified, bg = c.None })
    hl(0, 'NvimTreeGitNew', { fg = c.GitAdded, bg = c.None })

    -- Bufferline
    hl(0, 'BufferLineIndicatorSelected', { fg = c.LeftDark, bg = c.None })
    hl(0, 'BufferLineFill', { fg = c.None, bg = opts.transparent and c.Back or c.LeftDark })

    -- BarBar
    hl(0, 'BufferCurrent', { fg = c.Front, bg = c.TabCurrent })
    hl(0, 'BufferCurrentIndex', { fg = c.Front, bg = c.TabCurrent })
    hl(0, 'BufferCurrentMod', { fg = c.YellowOrange, bg = c.TabCurrent })
    hl(0, 'BufferCurrentSign', { fg = c.Front, bg = c.TabCurrent })
    hl(0, 'BufferCurrentTarget', { fg = c.Red, bg = c.TabCurrent })
    hl(0, 'BufferVisible', { fg = c.Gray, bg = c.TabCurrent })
    hl(0, 'BufferVisibleIndex', { fg = c.Gray, bg = c.TabCurrent })
    hl(0, 'BufferVisibleMod', { fg = c.YellowOrange, bg = c.TabCurrent })
    hl(0, 'BufferVisibleSign', { fg = c.Gray, bg = c.TabCurrent })
    hl(0, 'BufferVisibleTarget', { fg = c.Red, bg = c.TabCurrent })
    hl(0, 'BufferInactive', { fg = c.Gray, bg = c.TabOther })
    hl(0, 'BufferInactiveIndex', { fg = c.Gray, bg = c.TabOther })
    hl(0, 'BufferInactiveMod', { fg = c.YellowOrange, bg = c.TabOther })
    hl(0, 'BufferInactiveSign', { fg = c.Gray, bg = c.TabOther })
    hl(0, 'BufferInactiveTarget', { fg = c.Red, bg = c.TabOther })
    hl(0, 'BufferTabpage', { fg = c.Front, bg = c.TabOther })
    hl(0, 'BufferTabpageFill', { fg = c.Front, bg = c.TabOther })
    hl(0, 'BufferTabpages', { fg = c.Front, bg = c.TabOther })
    hl(0, 'BufferTabpagesFill', { fg = c.Front, bg = c.TabOther })

    -- IndentBlankLine
    hl(0, 'IndentBlanklineContextChar', { fg = c.ContextCurrent, bg = c.None, nocombine = true })
    hl(0, 'IndentBlanklineContextStart', { sp = c.ContextCurrent, bg = c.None, nocombine = true, underline = true })
    hl(0, 'IndentBlanklineChar', { fg = c.Context, bg = c.None, nocombine = true })
    hl(0, 'IndentBlanklineSpaceChar', { fg = c.Context, bg = c.None, nocombine = true })
    hl(0, 'IndentBlanklineSpaceCharBlankline', { fg = c.Context, bg = c.None, nocombine = true })

    -- Neotest
    hl(0, 'NeotestAdapterName', { fg = c.Front, bold = true })
    hl(0, 'NeotestDir', { fg = c.Blue })
    hl(0, 'NeotestExpandMarker', { fg = c.DimHighlight })
    hl(0, 'NeotestFailed', { fg = c.Red })
    hl(0, 'NeotestFile', { fg = c.Blue })
    hl(0, 'NeotestFocused', { bold = true })
    hl(0, 'NeotestIndent', { fg = c.DimHighlight })
    hl(0, 'NeotestMarked', { fg = c.YellowOrange, bold = true })
    hl(0, 'NeotestNamespace', { fg = c.Pink })
    hl(0, 'NeotestPassed', { fg = c.BlueGreen })
    hl(0, 'NeotestRunning', { fg = c.DarkYellow })
    hl(0, 'NeotestSkipped', { fg = c.Blue })
    hl(0, 'NeotestTarget', { fg = c.LightRed })
    hl(0, 'NeotestWatching', { fg = c.DarkYellow })
    hl(0, 'NeotestWinSelect', { fg = c.Blue, bold = true })

    -- LSP
    hl(0, 'DiagnosticOk', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'DiagnosticError', { fg = c.Red, bg = c.None })
    hl(0, 'DiagnosticWarn', { fg = c.Yellow, bg = c.None })
    hl(0, 'DiagnosticInfo', { fg = c.Blue, bg = c.None })
    hl(0, 'DiagnosticHint', { fg = c.Blue, bg = c.None })
    hl(0, 'DiagnosticUnnecessary', { fg = c.DisabledBlue, bg = c.None })
    hl(0, 'DiagnosticUnderlineError', { fg = c.None, bg = c.None, undercurl = true, sp = c.Red })
    hl(0, 'DiagnosticUnderlineWarn', { fg = c.None, bg = c.None, undercurl = true, sp = c.Yellow })
    hl(0, 'DiagnosticUnderlineInfo', { fg = c.None, bg = c.None, undercurl = true, sp = c.Blue })
    hl(0, 'DiagnosticUnderlineHint', { fg = c.None, bg = c.None, undercurl = true, sp = c.Blue })
    hl(0, 'LspReferenceText', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'LspReferenceRead', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'LspReferenceWrite', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })

    -- COC.nvim
    hl(0, 'CocHighlightText', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'CocHighlightRead', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'CocHighlightWrite', { fg = c.None, bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })

    -- Nvim compe
    hl(0, 'CmpItemKindVariable', { fg = c.LightBlue, bg = c.None })
    hl(0, 'CmpItemKindInterface', { fg = c.LightBlue, bg = c.None })
    hl(0, 'CmpItemKindText', { fg = c.LightBlue, bg = c.None })
    hl(0, 'CmpItemKindFunction', { fg = c.Pink, bg = c.None })
    hl(0, 'CmpItemKindMethod', { fg = c.Pink, bg = c.None })
    hl(0, 'CmpItemKindKeyword', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemKindProperty', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemKindUnit', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemKindConstructor', { fg = c.UiOrange, bg = c.None })
    hl(0, 'CmpItemMenu', { fg = c.PopupFront, bg = c.None })
    hl(0, 'CmpItemAbbr', { fg = c.Front, bg = c.None })
    hl(0, 'CmpItemAbbrDeprecated', { fg = c.CursorDark, bg = c.PopupBack, strikethrough = true })
    hl(0, 'CmpItemAbbrMatch', { fg = isDark and c.MediumBlue or c.DarkBlue, bg = c.None, bold = true })
    hl(0, 'CmpItemAbbrMatchFuzzy', { fg = isDark and c.MediumBlue or c.DarkBlue, bg = c.None, bold = true })

    -- HiPhish/rainbow-delimiters.nvim
    hl(0, 'RainbowDelimiterRed', { fg = c.Pink, bg = c.None })
    hl(0, 'RainbowDelimiterOrange', { fg = c.Orange, bg = c.None })
    hl(0, 'RainbowDelimiterYellow', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'RainbowDelimiterGreen', { fg = c.Green, bg = c.None })
    hl(0, 'RainbowDelimiterCyan', { fg = c.BlueGreen, bg = c.None })
    hl(0, 'RainbowDelimiterBlue', { fg = c.MediumBlue, bg = c.None })
    hl(0, 'RainbowDelimiterViolet', { fg = c.Violet, bg = c.None })

    -- rcarriga/nvim-dap-ui
    -- Source: https://github.com/rcarriga/nvim-dap-ui/blob/master/lua/dapui/config/highlights.lua
    hl(0, 'DapUIBreakpointsCurrentLine', { fg = c.BlueGreen, bold = true })
    hl(0, 'DapUIBreakpointsDisabledLine', { fg = c.DimHighlight })
    hl(0, 'DapUIBreakpointsInfo', { fg = c.BlueGreen })
    hl(0, 'DapUIBreakpointsLine', { fg = c.Pink })
    hl(0, 'DapUIBreakpointsPath', { fg = c.Pink })
    hl(0, 'DapUICurrentFrameName', { fg = c.BlueGreen, bold = true })
    hl(0, 'DapUIDecoration', { fg = c.Pink })
    hl(0, 'DapUIFloatBorder', { fg = c.Pink })
    hl(0, 'DapUILineNumber', { fg = c.Pink })
    hl(0, 'DapUIModifiedValue', { fg = c.Pink, bold = true })
    hl(0, 'DapUIPlayPause', { fg = c.BlueGreen })
    hl(0, 'DapUIPlayPauseNC', { fg = c.BlueGreen })
    hl(0, 'DapUIRestart', { fg = c.BlueGreen })
    hl(0, 'DapUIRestartNC', { fg = c.BlueGreen })
    hl(0, 'DapUIScope', { fg = c.Pink })
    hl(0, 'DapUISource', { fg = c.MediumBlue })
    hl(0, 'DapUIStepBack', { fg = c.Pink })
    hl(0, 'DapUIStepBackNC', { fg = c.Pink })
    hl(0, 'DapUIStepInto', { fg = c.Pink })
    hl(0, 'DapUIStepIntoNC', { fg = c.Pink })
    hl(0, 'DapUIStepOut', { fg = c.Pink })
    hl(0, 'DapUIStepOutNC', { fg = c.Pink })
    hl(0, 'DapUIStepOver', { fg = c.Pink })
    hl(0, 'DapUIStepOverNC', { fg = c.Pink })
    hl(0, 'DapUIStop', { fg = c.Red })
    hl(0, 'DapUIStopNC', { fg = c.Red })
    hl(0, 'DapUIStoppedThread', { fg = c.Pink })
    hl(0, 'DapUIThread', { fg = c.BlueGreen })
    hl(0, 'DapUIType', { fg = c.Pink })
    hl(0, 'DapUIUnavailable', { fg = c.DimHighlight })
    hl(0, 'DapUIUnavailableNC', { fg = c.DimHighlight })
    hl(0, 'DapUIWatchesEmpty', { fg = c.DimHighlight })
    hl(0, 'DapUIWatchesError', { fg = c.Red })
    hl(0, 'DapUIWatchesValue', { fg = c.BlueGreen })
    hl(0, 'DapUIWinSelect', { fg = c.Pink, bold = true })

    -- Dashboard
    hl(0, 'DashboardHeader', { fg = c.Blue, bg = c.None })
    hl(0, 'DashboardDesc', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'DashboardIcon', { fg = c.YellowOrange, bg = c.None })
    hl(0, 'DashboardShortCut', { fg = c.Pink, bg = c.None })
    hl(0, 'DashboardKey', { fg = c.Front, bg = c.None })
    hl(0, 'DashboardFooter', { fg = c.Blue, bg = c.None })

    -- Illuminate
    hl(0, 'illuminatedWord', { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'illuminatedCurWord', { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'IlluminatedWordText', { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'IlluminatedWordRead', { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })
    hl(0, 'IlluminatedWordWrite', { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue })

    -- mini.statusline
    hl(0, 'MiniStatuslineModeNormal', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineModeInsert', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineModeVisual', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineModeReplace', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineModeCommand', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineModeOther', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineDevinfo', { bg = c.LeftDark, fg = c.Front })
    hl(0, 'MiniStatuslineFilename', { bg = c.LeftMid, fg = c.Front })
    hl(0, 'MiniStatuslineFileinfo', { bg = c.LeftLight, fg = c.Front })
    hl(0, 'MiniStatuslineInactive', { bg = c.LeftDark, fg = c.Front })

    -- NeogitOrg/neogit
    if isDark then
        hl(0, 'NeogitDiffAdd', { fg = c.GitAdded, bg = c.DiffAdd })
        hl(0, 'NeogitDiffAddHighlight', { fg = c.GitAdded, bg = c.DiffAddLight })
        hl(0, 'NeogitDiffContext', { fg = c.PopupFront, bg = c.LeftDark })
        hl(0, 'NeogitDiffContextHighlight', { fg = c.PopupFront, bg = c.LeftMid })
        hl(0, 'NeogitDiffDelete', { fg = c.GitDeleted, bg = c.DiffChange })
        hl(0, 'NeogitDiffDeleteHighlight', { fg = c.GitDeleted, bg = c.DiffChangeLight })
        hl(0, 'NeogitDiffHeader', { fg = c.SplitLight, bg = c.Back })
        hl(0, 'NeogitDiffHeaderHighlight', { fg = c.SplitLight, bg = c.Back })
        hl(0, 'NeogitHunkHeader', { fg = c.GitModified, bg = c.LeftDark })
        hl(0, 'NeogitHunkHeaderHighlight', { fg = c.GitModified, bg = c.LeftMid })
    else
        hl(0, 'NeogitDiffAdd', { fg = c.GitAdded, bg = c.DiffAddLight })
        hl(0, 'NeogitDiffAddHighlight', { fg = c.GitAdded, bg = c.DiffAdd })
        hl(0, 'NeogitDiffContext', { fg = c.PopupFront, bg = c.LeftMid })
        hl(0, 'NeogitDiffContextHighlight', { fg = c.PopupFront, bg = c.LeftDark })
        hl(0, 'NeogitDiffDelete', { fg = c.GitDeleted, bg = c.DiffChangeLight })
        hl(0, 'NeogitDiffDeleteHighlight', { fg = c.GitDeleted, bg = c.DiffChange })
        hl(0, 'NeogitDiffHeader', { fg = c.SplitLight, bg = c.Back })
        hl(0, 'NeogitDiffHeaderHighlight', { fg = c.SplitLight, bg = c.Back })
        hl(0, 'NeogitHunkHeader', { fg = c.GitModified, bg = c.LeftMid })
        hl(0, 'NeogitHunkHeaderHighlight', { fg = c.GitModified, bg = c.LeftDark })
    end

    if isDark then
        hl(0, 'NvimTreeFolderIcon', { fg = c.Blue, bg = c.None })
        hl(0, 'NvimTreeIndentMarker', { fg = c.LineNumber, bg = c.None })

        hl(0, 'LspFloatWinNormal', { fg = c.Front, bg = c.None })
        hl(0, 'LspFloatWinBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspInfoBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaHoverBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaSignatureHelpBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaCodeActionBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaDefPreviewBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspLinesDiagBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaRenameBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaBorderTitle', { fg = c.CursorDark, bg = c.None })
        hl(0, 'LSPSagaDiagnosticTruncateLine', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaDiagnosticBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaDiagnosticBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaShTruncateLine', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaShTruncateLine', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaDocTruncateLine', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaRenameBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'LspSagaLspFinderBorder', { fg = c.LineNumber, bg = c.None })

        hl(0, 'TelescopePromptBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'TelescopeResultsBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'TelescopePreviewBorder', { fg = c.LineNumber, bg = c.None })
        hl(0, 'TelescopeNormal', { fg = c.Front, bg = c.None })
        hl(0, 'TelescopeSelection', { fg = c.Front, bg = c.PopupHighlightBlue })
        hl(0, 'TelescopeMultiSelection', { fg = c.Front, bg = c.PopupHighlightBlue })
        hl(0, 'TelescopeMatching', { fg = c.MediumBlue, bg = c.None, bold = true })
        hl(0, 'TelescopePromptPrefix', { fg = c.Front, bg = c.None })

        -- Debugging
        hl(0, 'debugPC', { bg = '#4C4C19' })

        -- symbols-outline
        -- white fg and lualine blue bg
        hl(0, 'FocusedSymbol', { fg = '#FFFFFF', bg = c.UiBlue })
        hl(0, 'SymbolsOutlineConnector', { fg = c.LineNumber, bg = c.None })
    else
        hl(0, 'NvimTreeFolderIcon', { fg = c.DarkBlue, bg = c.None })
        hl(0, 'NvimTreeIndentMarker', { fg = c.TabOther, bg = c.None })

        hl(0, 'LspFloatWinNormal', { fg = c.Front, bg = c.None })
        hl(0, 'LspFloatWinBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspInfoBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaHoverBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaSignatureHelpBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaCodeActionBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaDefPreviewBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspLinesDiagBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaRenameBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaBorderTitle', { fg = c.CursorDark, bg = c.None })
        hl(0, 'LSPSagaDiagnosticTruncateLine', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaDiagnosticBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaDiagnosticBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaShTruncateLine', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaShTruncateLine', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaDocTruncateLine', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaRenameBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'LspSagaLspFinderBorder', { fg = c.TabOther, bg = c.None })

        hl(0, 'TelescopePromptBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'TelescopeResultsBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'TelescopePreviewBorder', { fg = c.TabOther, bg = c.None })
        hl(0, 'TelescopeNormal', { fg = c.Front, bg = c.None })
        hl(0, 'TelescopeSelection', { fg = c.Front, bg = c.PopupHighlightBlue })
        hl(0, 'TelescopeMultiSelection', { fg = c.Back, bg = c.PopupHighlightBlue })
        hl(0, 'TelescopeMatching', { fg = c.MediumBlue, bg = c.None, bold = true })
        hl(0, 'TelescopePromptPrefix', { fg = c.Front, bg = c.None })

        -- Debugging
        hl(0, 'debugPC', { bg = '#FFFFBA' })

        -- COC.nvim
        hl(0, 'CocFloating', { fg = c.None, bg = c.PopupBack })
        hl(0, 'CocMenuSel', { fg = '#FFFFFF', bg = '#285EBA' })
        hl(0, 'CocSearch', { fg = '#2A64B9', bg = c.None })

        -- Pmenu
        hl(0, 'Pmenu', { fg = c.None, bg = c.PopupBack })
        hl(0, 'PmenuSel', { fg = '#FFFFFF', bg = '#285EBA' })

        -- Copilot
        hl(0, 'CopilotSuggestion', { fg = c.Gray, bg = c.None })

        -- symbols-outline
        -- white fg and lualine blue bg
        hl(0, 'FocusedSymbol', { fg = c.Back, bg = c.Pink })
        hl(0, 'SymbolsOutlineConnector', { fg = c.TabOther, bg = c.None })
    end
end

theme.link_highlight = function()
    -- Legacy groups for official git.vim and diff.vim syntax
    hl(0, 'diffAdded', { link = 'DiffAdd' })
    hl(0, 'diffChanged', { link = 'DiffChange' })
    hl(0, 'diffRemoved', { link = 'DiffDelete' })
    -- Legacy groups for treesitter
    hl(0, '@parameter', { link = '@variable.parameter' })
    hl(0, '@field', { link = '@variable.member' })
    hl(0, '@string.regex', { link = '@string.regexp' })
    hl(0, '@float', { link = '@number.float' })
    hl(0, '@namespace', { link = '@module' })
    hl(0, '@method', { link = '@function.method' })
    hl(0, '@field', { link = '@variable.member' })
    hl(0, '@conditional', { link = '@keyword.conditional' })
    hl(0, '@repeat', { link = '@keyword.repeat' })
    hl(0, '@exception', { link = '@keyword.exception' })
    hl(0, '@storageclass', { link = '@keyword.storage' })
    hl(0, '@include', { link = '@keyword.import' })
    hl(0, '@text.strong', { link = '@markup.strong' })
    hl(0, '@text.underline', { link = '@markup.underline' })
    hl(0, '@text.emphasis', { link = '@markup.italic' })
    hl(0, '@text.strike', { link = '@markup.strikethrough' })
    hl(0, '@text.title', { link = '@markup.heading' })
    hl(0, '@text.uri', { link = '@markup.link.url' })
    hl(0, '@text.literal', { link = '@markup.raw' })
    hl(0, '@text.note', { link = '@comment.note' })
    hl(0, '@text.warning', { link = '@comment.warning' })
    hl(0, '@text.danger', { link = '@comment.error' })
    hl(0, '@text.diff.add', { link = '@diff.plus' })
    hl(0, '@text.diff.delete', { link = '@diff.minus' })
    -- Nvim compe
    hl(0, 'CompeDocumentation', { link = 'Pmenu' })
    hl(0, 'CompeDocumentationBorder', { link = 'Pmenu' })
    hl(0, 'CmpItemKind', { link = 'Pmenu' })
    hl(0, 'CmpItemKindClass', { link = 'CmpItemKindConstructor' })
    hl(0, 'CmpItemKindModule', { link = 'CmpItemKindKeyword' })
    hl(0, 'CmpItemKindOperator', { link = '@operator' })
    hl(0, 'CmpItemKindReference', { link = '@variable.parameter.reference' })
    hl(0, 'CmpItemKindValue', { link = '@variable.member' })
    hl(0, 'CmpItemKindField', { link = '@variable.member' })
    hl(0, 'CmpItemKindEnum', { link = '@variable.member' })
    hl(0, 'CmpItemKindSnippet', { link = '@text' })
    hl(0, 'CmpItemKindColor', { link = 'cssColor' })
    hl(0, 'CmpItemKindFile', { link = '@text.uri' })
    hl(0, 'CmpItemKindFolder', { link = '@text.uri' })
    hl(0, 'CmpItemKindEvent', { link = '@constant' })
    hl(0, 'CmpItemKindEnumMember', { link = '@variable.member' })
    hl(0, 'CmpItemKindConstant', { link = '@constant' })
    hl(0, 'CmpItemKindStruct', { link = '@structure' })
    hl(0, 'CmpItemKindTypeParameter', { link = '@variable.parameter' })
end

return theme
